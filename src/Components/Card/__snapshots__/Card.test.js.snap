// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Card should match snapshot with all data passed in 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <Card
    cardInfo={
      Object {
        "card": Object {
          "Homeworld": "Tatooine",
          "Name": "Luke Skywalker",
          "Population": "200000",
          "Species": "Human",
        },
      }
    }
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "checkPropTypes": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "host",
    "props": Object {
      "children": Array [
        <p>
          cardInfo
          : 
          Object {
            "card": Object {
              "Homeworld": "Tatooine",
              "Name": "Luke Skywalker",
              "Population": "200000",
              "Species": "Human",
            },
          }
        </p>,
      ],
      "className": "card",
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": "cardInfo",
        "nodeType": "host",
        "props": Object {
          "children": Array [
            "cardInfo",
            ": ",
            Object {
              "card": Object {
                "Homeworld": "Tatooine",
                "Name": "Luke Skywalker",
                "Population": "200000",
                "Species": "Human",
              },
            },
          ],
        },
        "ref": null,
        "rendered": Array [
          "cardInfo",
          ": ",
          Object {
            "card": Object {
              "Homeworld": "Tatooine",
              "Name": "Luke Skywalker",
              "Population": "200000",
              "Species": "Human",
            },
          },
        ],
        "type": "p",
      },
    ],
    "type": "div",
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": Array [
          <p>
            cardInfo
            : 
            Object {
              "card": Object {
                "Homeworld": "Tatooine",
                "Name": "Luke Skywalker",
                "Population": "200000",
                "Species": "Human",
              },
            }
          </p>,
        ],
        "className": "card",
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": "cardInfo",
          "nodeType": "host",
          "props": Object {
            "children": Array [
              "cardInfo",
              ": ",
              Object {
                "card": Object {
                  "Homeworld": "Tatooine",
                  "Name": "Luke Skywalker",
                  "Population": "200000",
                  "Species": "Human",
                },
              },
            ],
          },
          "ref": null,
          "rendered": Array [
            "cardInfo",
            ": ",
            Object {
              "card": Object {
                "Homeworld": "Tatooine",
                "Name": "Luke Skywalker",
                "Population": "200000",
                "Species": "Human",
              },
            },
          ],
          "type": "p",
        },
      ],
      "type": "div",
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "legacyContextMode": "parent",
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getChildContext": Object {
            "calledByRenderer": false,
          },
          "getDerivedStateFromProps": Object {
            "hasShouldComponentUpdateBug": false,
          },
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
}
`;
